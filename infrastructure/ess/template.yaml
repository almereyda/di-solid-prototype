AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: "A stack to run ESS in an EKS cluster"

Parameters:
  CommonStackName:
    Type: String
    Default: common
  KubernetesClusterName:
    Type: String
    Default: hello-node-eksCluster
  Namespace:
    Type: String
    Default: ess
  CertManagerNamespace:
    Type: String
    Default: cert-manager

Resources:
  FargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref KubernetesClusterName
      PodExecutionRoleArn: !GetAtt PodExecutionRole.Arn
      Selectors:
        - Namespace: !Ref Namespace
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: "${CommonStackName}-PrivateSubnet1ID"
        - Fn::ImportValue:
            Fn::Sub: "${CommonStackName}-PrivateSubnet2ID"

  CertManagerFargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref KubernetesClusterName
      PodExecutionRoleArn: !GetAtt PodExecutionRole.Arn
      Selectors:
        - Namespace: !Ref CertManagerNamespace
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: "${CommonStackName}-PrivateSubnet1ID"
        - Fn::ImportValue:
            Fn::Sub: "${CommonStackName}-PrivateSubnet2ID"

  PodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref Namespace, PodExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Federated: arn:aws:iam::626456592666:oidc-provider/oidc.eks.eu-west-2.amazonaws.com/id/747AA2C8F0C130241EF27E7D78A9FE14
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "oidc.eks.eu-west-2.amazonaws.com/id/747AA2C8F0C130241EF27E7D78A9FE14:aud": "sts.amazonaws.com"
                "oidc.eks.eu-west-2.amazonaws.com/id/747AA2C8F0C130241EF27E7D78A9FE14:sub": "system:serviceaccount:ess:ess"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
        - !Ref LoggingPolicy

  ExternalDnsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Grants access to manage DNS records in Route53"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - route53:ChangeResourceRecordSets
          Resource: "arn:aws:route53:::hostedzone/*"
        - Effect: Allow
          Action:
          - route53:ListHostedZones
          - route53:ListResourceRecordSets
          Resource: "*"

  LoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Allow resources to log to CloudWatch"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Resource: "*"

  HTTPSCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.ess.solid.integration.account.gov.uk"
      DomainValidationOptions: 
        - DomainName: "*.ess.solid.integration.account.gov.uk"
          HostedZoneId: 
            Fn::ImportValue:
              Fn::Sub: "${CommonStackName}-SolidRoute53"
      ValidationMethod: DNS

Outputs:
  HTTPSCertificate:
    Description: ARN for the wildcard ACM TLS certificate used for the cluster
    Value:
      Ref: HTTPSCertificate
