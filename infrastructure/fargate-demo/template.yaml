AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: "A stack to run a demo container in Fargate"

Parameters:
  ServiceName:
    Type: String
    Default: hello-node-fargate
  ContainerPort:
    Type: Number
    Default: 3000
  LoadBalancerPort:
    Type: Number
    Default: 80
  CommonStackName:
    Type: String
    Default: common

Resources:
  HelloWorldECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders: [
        "FARGATE_SPOT"
      ]

  HelloWorldTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: '256'
          Memory: '512'
          Image: docker.io/alexsmith11/hello-node:latest
          PortMappings:
            - ContainerPort: !Ref ContainerPort

  HelloWorldService:
    Type: AWS::ECS::Service
    DependsOn: HelloWorldLoadBalancerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !GetAtt HelloWorldECSCluster.Arn
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 15
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue:
                Fn::Sub: "${CommonStackName}-PublicSubnet1ID"
            - Fn::ImportValue:
                Fn::Sub: "${CommonStackName}-PublicSubnet2ID"
      TaskDefinition: !Ref HelloWorldTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref HelloWorldTargetGroup

  HelloWorldTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: ip
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${CommonStackName}-VPCID"

  HelloWorldLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref HelloWorldTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${CommonStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${CommonStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: "${CommonStackName}-PublicSubnet1ID"
        - Fn::ImportValue:
            Fn::Sub: "${CommonStackName}-PublicSubnet2ID"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref HelloWorldTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTP

  HTTPSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref HelloWorldTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref HTTPSCertificate
      
  HTTPSCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: fargate-demo.solid.integration.account.gov.uk
      DomainValidationOptions: 
        - DomainName: fargate-demo.solid.integration.account.gov.uk
          HostedZoneId: 
            Fn::ImportValue:
              Fn::Sub: "${CommonStackName}-SolidRoute53"
      ValidationMethod: DNS

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: fargate-demo.solid.integration.account.gov.uk
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
      HostedZoneId: 
        Fn::ImportValue:
          Fn::Sub: "${CommonStackName}-SolidRoute53"
      Type: CNAME
      TTL: 3000

Outputs:
  ServiceAddress:
    Value: !GetAtt LoadBalancer.DNSName
